# -*- coding: utf-8 -*-
"""TimeSeries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l5r2wrIxcVvXinE1PbJAgV0md9UPPvUi

# Time Series Project - Forecasting PM2.5 Value
## by Abimanyu Sri Setyo

**Project Criteria**
* The dataset to be used is free, but has a minimum of 1000 samples.
* Must use LSTM in model architecture.
* Validation set is 20% of the total dataset.
* The model must use a sequential model.
* Must use Learning Rate on Optimizer.
* MAE < 10% data scale.

**About Dataset**
* **[Forecasting PM2.5 Value](https://archive.ics.uci.edu/ml/datasets/Beijing+PM2.5+Data)**, PM2.5 is an air pollutant that is a concern for people's health when levels in air are high. This hourly data set contains the PM2.5 data of US Embassy in Beijing. Meanwhile, meteorological data from Beijing Capital International Airport are also included.

## Import Libraries
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt
import tensorflow as tf

"""## Import Dataset"""

df = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00381/PRSA_data_2010.1.1-2014.12.31.csv")
df.head()

"""## Cleaning Dataset

### Dropping data with NaN value
"""

df = df.dropna()
df.head()

"""### Dropping time attributes and categorical attributes"""

df_train = df.drop(['No', 'year', 'month', 'day', 'hour', 'cbwd'], axis=1)
df_train.reset_index().drop(['index'], axis=1).head(20)

"""### Checking null value for every attributes"""

df_train.isnull().sum()

df_train.describe()

"""## Making data transformation function"""

def data2sequences(df, window_size=1):
  X = []
  y = []
  scaler = MinMaxScaler(feature_range=(0,1))
  scaled = scaler.fit_transform(df)
  for i in range(len(df)-window_size):
    X.append(scaled[i:i+window_size])
    y.append(df['pm2.5'].iloc[i+window_size])
  
  return X, y, scaler

"""## Transform data into sequential data attributes with 10 consecutive days as input features"""

X, y, scaler = data2sequences(df_train, window_size=10)

"""## Dividing data into train and test"""

X_train, X_test, y_train, y_test = train_test_split(np.array(X), np.array(y), test_size=0.2, shuffle=False)

"""## Construct the model"""

model = tf.keras.models.Sequential([                                  
  tf.keras.layers.LSTM(100, input_shape=(X_train.shape[1], X_train.shape[2])),
  tf.keras.layers.Dense(256),
  tf.keras.layers.Dense(256),
  tf.keras.layers.Dense(1, activation='linear')
])

optimizer = tf.keras.optimizers.Adam(learning_rate=0.01)

model.compile(loss='mae',
              optimizer=optimizer,
              metrics=["mae"])

callbacks = [tf.keras.callbacks.EarlyStopping(patience=10,
                                              monitor='val_loss',
                                              restore_best_weights=True)]
model.summary()

"""## Run the model"""

history = model.fit(X_train.astype('float32'),
                    y_train.astype('float32'), epochs=100,
                    batch_size=64,
                    validation_data=(X_test.astype('float32'),
                                     y_test.astype('float32')),
                    callbacks=callbacks)

"""## Compare MAE"""

max = df_train.describe()['pm2.5']['max']
min = df_train.describe()['pm2.5']['min']

prediction = model.predict(X_train)
prediction2 = model.predict(X_test)

print('MAE Train Data : ', mean_absolute_error(y_train, prediction))
print('MAE Test Data : ', mean_absolute_error(y_test, prediction2))

"""## Visualize Data

### Plotting Actual Value of PM2.5 Data
"""

plt.figure(figsize=(20,4))
plt.plot(y, label = "Actual Data")
plt.title('Actual PM2.5 Value')
plt.ylabel('PM2.5')
plt.legend()
plt.show()

"""### Plotting Actual vs Prediction Value of PM2.5 Data"""

plt.figure(figsize=(20,4))
plt.plot(y, color='blue', label='Actual Data')
plt.plot(range(0, len(y_train)), prediction, color='red', label='Prediction Train Data')
plt.plot(range(len(y_train),len(y)), prediction2, color='green', label='Prediction Test Data')
plt.title('Actual VS Prediction PM2.5 Value')
plt.ylabel('PM2.5')
plt.legend()
plt.show()